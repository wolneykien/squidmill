(use-modules (ice-9 rdelim) (ice-9 format))

(define (report-log-line timestamp elapsed client action/code size method uri ident hierarchy/from content)
  (format #t "Timestamp: ~a~%" timestamp)
  (format #t "Elapsed: ~a~%" elapsed)
  (format #t "Client: ~a~%" client)
  (format #t "Action/Code: ~a~%" action/code)
  (format #t "Size: ~a~%" size)
  (format #t "Method: ~a~%" method)
  (format #t "URI: ~a~%" uri)
  (format #t "Ident: ~a~%" ident)
  (format #t "Hierarch/From: ~a~%" hierarchy/from)
  (format #t "Content: ~a~%" content)
  (newline))

(define (report-uri timestamp elapsed client action/code size method uri ident hierarchy/from content)
  (format #t "URI: ~a~%" uri))

(define (process-log . args)
  (let ((proc (or (and (not (null? args))
                       (procedure? (car args))
                       (car args))
                  report-log-line))
        (files (or (and (not (null? args))                        
                        (or (and (string? (car args)) args)
                            (and (string? (cdr args)) (list (cdr args)))
                            (and (string? (cadr args)) (cdr args))))
                   "/var/log/squid/access.log")))
    (let next-file ((files files))
      (or (null? files)
          (and (call-with-input-file (car files)
                 (lambda (port)
                   (let loop ()
                     (let* ((l (read-line port 'split))
                            (t (car l)))
                       (or (eof-object? t)
                           (and (apply proc (string-tokenize t))
                                (or (eof-object? (cdr l)) (loop))))))))
               (next-file (cdr files)))))))
