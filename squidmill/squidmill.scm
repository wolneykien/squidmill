(use-modules (srfi srfi-1) (ice-9 rdelim))

(define (false-empty val)
  (and (not (equal? "-" val)) val))

(define (false-empty-number val)
  (and (not (equal? "-" val)) (string->number val)))

(define (report-log-line tail timestamp elapsed client action/code size method uri ident hierarchy/from content)
  (format #t "Timestamp: ~a~%" timestamp)
  (format #t "Elapsed: ~a~%" elapsed)
  (format #t "Client: ~a~%" client)
  (format #t "Action/Code: ~a~%" action/code)
  (format #t "Size: ~a~%" size)
  (format #t "Method: ~a~%" method)
  (format #t "URI: ~a~%" uri)
  (format #t "Ident: ~a~%" (false-empty ident))
  (format #t "Hierarch/From: ~a~%" hierarchy/from)
  (format #t "Content: ~a~%" content)
  (newline))

(define (report-uri tail timestamp elapsed client action/code size method uri ident hierarchy/from content)
  (format #t "URI: ~a~%" uri))

(define (log-line->assoc timestamp elapsed client action/code size method uri ident hierarchy/from content)
  (list
    (cons 'timestamp (false-empty-number timestamp))
    (cons 'elapsed (false-empty-number elapsed))
    (cons 'client client)
    (cons 'action/code action/code)
    (cons 'size (false-empty-number size))
    (cons 'method method)
    (cons 'uri uri)
    (cons 'ident (false-empty ident))
    (cons 'hierarchy/from hierarchy/from)
    (cons 'content content)))

(define (write-assoc tail timestamp elapsed client action/code size method uri ident hierarchy/from content)
  (write (log-line->assoc timestamp elapsed client action/code size method uri ident hierarchy/from content))
  (newline))

(define (update-assoc key update-proc new-vals old-vals)
  (let ((new-entry (assoc key new-vals))
        (old-entry (assoc key old-vals)))
    (cond
     ((or (not new-entry)
          (not (cdr new-entry))) old-vals)
     ((or (not old-entry)
          (not (cdr old-entry)))
      (append (alist-delete key old-vals)
              (list new-entry)))
     (else (append (alist-delete key old-vals)
                   (list
                    (cons key
                          (update-proc (cdr new-entry)
                                       (cdr old-entry)))))))))

(define (sum-log sum timestamp elapsed client action/code size method uri ident hierarchy/from content)
  (let ((vals (log-line->assoc timestamp elapsed client action/code size method uri ident hierarchy/from content)))
    (if (list? sum)
        (update-assoc 'elapsed + vals
          (update-assoc 'size + vals
            (update-assoc 'timestamp min vals sum)))
        vals)))

(define (process-log . args)
  (let ((proc (or (and (not (null? args))
                       (procedure? (car args))
                       (car args))
                  report-log-line))
        (files (or (and (not (null? args))
                        (or (and (string? (car args)) args)
                            (and (string? (cdr args)) (list (cdr args)))
                            (and (not (null? (cdr args)))
                                 (string? (cadr args)) (cdr args))))
                   (list "/var/log/squid/access.log"))))
    (let next-file ((files files)
                    (tail #f))
      (if (not (null? files))
          (next-file (cdr files)
                     (call-with-input-file (car files)
                       (lambda (port)
                         (let loop ((tail tail))
                           (let ((ln (read-line port)))
                             (if (not (eof-object? ln))
                                 (let ((tail (apply proc tail (string-tokenize ln))))
                                   (if (not (unspecified? tail))
                                       (loop tail)
                                       (loop #f)))
                                 tail))))))
          tail))))
